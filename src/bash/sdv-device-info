#!/bin/bash
# /********************************************************************************
# * Copyright (c) 2022 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/


# Config
COMMAND="show"
AUTORESTART=1

COL_NC='\e[39m'
COL_RED='\e[31m'
COL_GREEN='\e[32m'
COL_YELLOW='\e[33m'
COL_BLUE='\e[34m'
COL_GRAY='\e[90m'
COL_WHITE='\e[97m'
COL_NC_BOLD='\e[1;39m'

init_colors() {
	export TEXT_OK="${COL_GREEN}OK${COL_NC}"
	export TEXT_NOTICE="${COL_YELLOW}N/A${COL_NC}"
	export TEXT_FAIL="${COL_RED}FAILED!${COL_NC}"
	export SEPARATOR="${COL_GRAY}-----------------------------------------------------------${COL_NC}"
}

######################################################
#                        setup                       #
######################################################

while [ -n "$1" ]; do
	if [ "$1" = "--verbose" ] || [ "$1" = "-v" ]; then
		VERBOSE=1
	elif [ "$1" = "--norestart" ] || [ "$1" = "-n" ]; then
		AUTORESTART=0
	elif [ "$1" = "--ansi" ] || [ "$1" = "-a" ]; then
		# reset COL_XX for monochrome output
		export COL_NC=""
		export COL_RED=""
		export COL_GREEN=""
		export COL_YELLOW=""
		export COL_BLUE=""
		export COL_WHITE=""
		export COL_GRAY=""
		export COL_NC_BOLD=""
	elif [ "$1" = "--help" ] || [ "$1" = "help" ] || [ "$1" = "-h" ]; then
    echo "sdv-device-info v0.2"
		echo "Usage: $0 [options] [command]"
    echo "Show SDV device configuration information"
    echo "Example: $0 show"
    echo
    echo "Commands:"
    echo " show                 : Display configuration (default command)"
    echo " help                 : This message"
    echo " env                  : Format output for use in scripts"
    echo
    echo "Options:"
		echo " --ansi | -a      : Don't use colored output."
    echo " --norestart | -n : Do not automatically restart services"
		echo " --verbose | -v   : Enable verbose mode."
		echo " --help | -h      : This message."
		echo
		exit 0
  elif [ "$1" = "show" ]; then
    COMMAND="show"
  elif [ "$1" = "env" ]; then
    COMMAND="env"
	fi
	shift
done

function loadDeviceInfo() {
  MOSQUITTO_HOST="localhost"
  MOSQUITTO_TOPIC="edge/thing/request"
  PAYLOAD=$(mosquitto_rr -h ${MOSQUITTO_HOST} -t '${MOSQUITTO_TOPIC}' -e 'edge/thing/response' -W 1 -m '')
  MOSQUITTO_RC=$?
  FULL_CONNECTION_IDENTIFIER=$(echo "$PAYLOAD" | jq .deviceId | tr -d '"')
  TENANT_ID=$(echo "$PAYLOAD" | jq .tenantId | tr -d '"')
  CLOUD_HUB=$(echo "$FULL_CONNECTION_IDENTIFIER" | cut -d ':' -f 1)
  DEVICE_ID=$(echo "$FULL_CONNECTION_IDENTIFIER" | cut -d ':' -f 2)
  HUB_HOSTNAME=$(echo "$FULL_CONNECTION_IDENTIFIER" | cut -d ':' -f 3)
}

function showConnectorDeviceInfo() {
  loadDeviceInfo
  printf -- "${COL_WHITE}[Cloud Connector - Device Information]${COL_NC}\n"
  printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Mosquitto Hostname:"  "${MOSQUITTO_HOST}"
  printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Mosquitto Topic:"  "${MOSQUITTO_TOPIC}"
  if [ ${MOSQUITTO_RC} == 27 ]; then
    printf -- "  * %-23s : ${COL_RED}%s${COL_NC}\n" "Status:"  "ERROR (Time out waiting for reply ${MOSQUITTO_RC})"
  elif [ ${MOSQUITTO_RC} ]; then
    printf -- "  * %-23s : ${COL_RED}%s${COL_NC}\n" "Status:"  "ERROR (exit code ${MOSQUITTO_RC})"
  else
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Connection Identifier:"  "${FULL_CONNECTION_IDENTIFIER}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Tenant ID:"  "${TENANT_ID}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Cloud Backend:"  "${CLOUD_HUB}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Device ID:"  "${DEVICE_ID}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "IoT Hub:"  "${HUB_HOSTNAME}"
  fi
}

function showCertificateDeviceInfo() {
  CERT_FILE="/data/var/certificates/device.crt"
  KEY_FILE="/data/var/certificates/device.key"
  printf -- "${COL_WHITE}[Device Certificate Information]${COL_NC}\n"
  if [ -f ${CERT_FILE} ]; then
    CERT_CN=$(openssl x509 -subject -noout -in ${CERT_FILE})
    CERT_ISSUER=$(openssl x509 -issuer -noout -in ${CERT_FILE})
    CERT_STARTDATE=$(openssl x509 -startdate -noout -in ${CERT_FILE})
    CERT_ENDDATE=$(openssl x509 -enddate -noout -in ${CERT_FILE})
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Certificate file:"  "${CERT_FILE}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Common Name:"  "${CERT_CN}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Issuer:"  "${CERT_ISSUER}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Start Date:"  "${CERT_STARTDATE}"
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "End Date:"  "${CERT_ENDDATE}"
  else
    printf -- "  * %-23s : ${COL_RED}%s${COL_NC}\n" "Certificate file:"  "ERROR (${CERT_FILE} not found)"
  fi

  if [ -f ${KEY_FILE} ]; then
    printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Key file:"  "${KEY_FILE}"
  else
    printf -- "  * %-23s : ${COL_RED}%s${COL_NC}\n" "Key file:"  "ERROR (${KEY_FILE} not found)"
  fi
}

if [ "$COMMAND" = "env" ]; then
 loadDeviceInfo
 echo FULL_CONNECTION_IDENTIFIER="$FULL_CONNECTION_IDENTIFIER"
 echo TENANT_ID="$TENANT_ID"
 echo CLOUD_HUB="$CLOUD_HUB"
 echo DEVICE_ID="$DEVICE_ID"
 echo HUB_HOSTNAME="$HUB_HOSTNAME"
 exit 0
fi

init_colors

if [ -z $COMMAND ] | [ "$COMMAND" = "show" ]; then
 showConnectorDeviceInfo
 showCertificateDeviceInfo
 exit 0
fi

