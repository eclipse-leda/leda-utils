#!/bin/bash
# /********************************************************************************
# * Copyright (c) 2022 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/
#
# Generating dummy device certificates (self-signed) according to tutorial
# https://learn.microsoft.com/en-us/azure/iot-hub/tutorial-x509-self-sign
#
#set -x

echo "Checking Eclipse Leda Device Provisioning configuration..."
    
DEVICE_ID_FILE="/etc/deviceid"

CERT_DIR="/data/var/certificates"

if [ -d ${CERT_DIR} ]; then
    echo "- Certificates directory exists"
else
    echo "- Creating ${CERT_DIR}"
    mkdir -p ${CERT_DIR}
fi


CERT_FILE="${CERT_DIR}/device.crt"
KEY_FILE="${CERT_DIR}/device.key"

CERT_FILE2="${CERT_DIR}/device2.crt"
KEY_FILE2="${CERT_DIR}/device2.key"

loadDeviceId() {
    echo "Checking Device ID"

    NET_DEV=$(ip route | grep default | sed -e "s/^.*dev.//" -e "s/.proto.*//")
    echo "- Based on network device: ${NET_DEV}"

    if [ -z ${NET_DEV} ]; then
        echo "Missing network device or default route on network device, aborting"
        exit 1
    fi

    # Fallback, in case run-postinsts is not running
    if [ ! -f "${DEVICE_ID_FILE}" ];
    then
        echo "- File does not exist, creating: ${DEVICE_ID_FILE}"
        DEVICE_ID=$(sed 's/\:/\-/g' /sys/class/net/${NET_DEV}/address)
        echo ${DEVICE_ID} > /etc/deviceid
    fi

    # Fallback, in case we do not have write access to /etc
    if [ ! -f "${DEVICE_ID_FILE}" ];
    then
        DEVICE_ID=$(sed 's/\:/\-/g' /sys/class/net/${NET_DEV}/address)
    else
        DEVICE_ID=$(cat /etc/deviceid)
    fi

    echo "- Device ID: ${DEVICE_ID}"
}

generateDeviceCertificates() {
    echo "Generating"

    DEVICE_CSR_1=$(mktemp -t leda-device1-csr-XXXXXX)
    DEVICE_CERT_1=$(mktemp -t leda-device1-crt-XXXXXX)
    DEVICE_KEY_1=$(mktemp -t leda-device1-key-XXXXXX)
    
    DEVICE_CSR_2=$(mktemp -t leda-device2-csr-XXXXXX)
    DEVICE_CERT_2=$(mktemp -t leda-device2-crt-XXXXXX)
    DEVICE_KEY_2=$(mktemp -t leda-device2-key-XXXXXX)

    echo "- private keys"
    openssl genpkey -out ${DEVICE_KEY_1} -algorithm RSA -pkeyopt rsa_keygen_bits:2048 2>/dev/null
    openssl genpkey -out ${DEVICE_KEY_2} -algorithm RSA -pkeyopt rsa_keygen_bits:2048 2>/dev/null
    echo "- certificate signing requests"
    openssl req -new -key ${DEVICE_KEY_1} -out ${DEVICE_CSR_1} -subj "/CN=${DEVICE_ID}" 2>/dev/null
    openssl req -new -key ${DEVICE_KEY_2} -out ${DEVICE_CSR_2} -subj "/CN=${DEVICE_ID}" 2>/dev/null
    #openssl req -text -in ${DEVICE_CSR_1} -noout
    #openssl req -text -in ${DEVICE_CSR_2} -noout
    echo "- self-signing certificates"
    openssl x509 -req -days 365 -in ${DEVICE_CSR_1} -signkey ${DEVICE_KEY_1} -out ${DEVICE_CERT_1} 2>/dev/null
    openssl x509 -req -days 365 -in ${DEVICE_CSR_2} -signkey ${DEVICE_KEY_2} -out ${DEVICE_CERT_2} 2>/dev/null

    echo "Installing device certificates ..."
    cp -v ${DEVICE_CERT_1} ${CERT_FILE}
    cp -v ${DEVICE_KEY_1} ${KEY_FILE}
    cp -v ${DEVICE_CERT_2} ${CERT_FILE2}
    cp -v ${DEVICE_KEY_2} ${KEY_FILE2}
}

showDeviceCerts() {
    echo "- Primary device certificate: ${CERT_FILE}"
    echo "- Primary device private key: ${KEY_FILE}"
    echo "- Secondary device certificate: ${CERT_FILE2}"
    echo "- Secondary device private key: ${KEY_FILE2}"

    echo "Fingerprints (add these to the Azure IoT Hub Device)"
    THUMB_1=$(openssl x509 -in ${CERT_FILE} -noout -fingerprint | cut -f2 -d'=' | tr -d ':')
    THUMB_2=$(openssl x509 -in ${CERT_FILE2} -noout -fingerprint | cut -f2 -d'=' | tr -d ':')
    echo "- Primary thumbprint: ${THUMB_1}"
    echo "- Secondary thumbprint: ${THUMB_2}"
}

loadDeviceId

echo "Checking device certificates"
if [ -f ${CERT_FILE} ] && [ -f ${KEY_FILE} ] && [ -f ${CERT_FILE2} ] && [ -f ${KEY_FILE2} ]; then
    echo "- All device certificates are present"
else
    echo "- Some certificates are missing"
    generateDeviceCertificates

    echo "- Restarting cloud connector"
    kanto-cm stop -n cloudconnector -f --timeout 5
    kanto-cm start -n cloudconnector
fi

showDeviceCerts
