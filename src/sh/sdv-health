#!/bin/sh
# shellcheck disable=SC3043
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC2034
# shellcheck disable=SC2059
# shellcheck disable=SC2039
# /********************************************************************************
# * Copyright (c) 2022 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/


##############################################################################
###  DEFAULT VALUES, can be overriden by sdv.conf on multiuple locations:  ###
###  "$HOME/.config/sdv.conf", "/etc/sdv.conf"                             ###
##############################################################################

# CAN network interface to check for Seat ECU
SDV_CAN="can0"

# CAN network interface to check for Radar ECU (optional)
SDV_CAN_RADAR=""

# Default list of monitored Systemd Services
SDV_SERVICES="containerd rauc container-management kanto-update-manager"

# Default list of optional Systemd Services
#SDV_SERVICES_OPT="vehicle-api mosquitto"
SDV_SERVICES_OPT="sshd.socket systemd-networkd systemd-timesyncd"

# Default list of requred SDV Docker containers
KANTO_CM_CONTAINERS="cloudconnector databroker sua "
KANTO_CM_CONTAINERS_OPT="seatservice-example hvacservice-example node-red-example feedercan feedergps otelcol-sdv-exporter otelcol-sdv-agent "
# Change internet connectivity check host
SDV_PING_HOST="1.1.1.1"

#### Default config values ####

# dump 20 lines of logs by default
LOG_LINES=20
DUMP_LOGS=
VERBOSE=0

### CONSTANTS below

# systemctl exec
SYSTEMCTL_CMD="systemctl"

# kanto paths
KANTO_CMD="kanto-cm"
KANTO_CM_HOME_DIR=/var/lib/container-management
KANTO_CM_LOG_FILE=json.log
KANTO_SOCK=/run/container-management/container-management.sock
KANTO_LOG_LINES=$LOG_LINES

COL_NC='\e[39m'
COL_RED='\e[31m'
COL_GREEN='\e[32m'
COL_YELLOW='\e[33m'
COL_BLUE='\e[34m'
COL_GRAY='\e[90m'
COL_WHITE='\e[97m'
COL_NC_BOLD='\e[1;39m'

init_colors() {
	export TEXT_OK="${COL_GREEN}OK${COL_NC}"
	export TEXT_NOTICE="${COL_YELLOW}N/A${COL_NC}"
	export TEXT_WARN="${COL_YELLOW}WARNING${COL_NC}"
	export TEXT_FAIL="${COL_RED}FAILED!${COL_NC}"
	export SEPARATOR="${COL_GRAY}-----------------------------------------------------------${COL_NC}"
}

check_service()
{
	local service="$1"
	local required="$2" # assumed true if not set

	local STATUS
	local ACTIVE

	STATUS=$($SYSTEMCTL_CMD status $service -n 0 2>&1)
	ACTIVE=$(echo "$STATUS" | grep 'Active:' | xargs)

	if (echo "$ACTIVE" | grep -q "active (running)\|active (listening)") then
		printf -- "$TEXT_OK\n"
	else
		[ -z "$ACTIVE" ] && ACTIVE="$( $SYSTEMCTL_CMD status $service -n 0 2>&1 1>/dev/null )"
		if [ "$required" = "false" ]; then
			printf -- "$TEXT_NOTICE\t ($ACTIVE)\n"
		else
			printf -- "$TEXT_FAIL\t ($ACTIVE)\n"
		fi
	fi
}

check_rc() {
	local STATUS
	# shellcheck disable=SC2048
	STATUS=$( $* 2>&1 1>/dev/null )
	rc=$?
	if [ $rc -eq 0 ]; then
		printf -- "$TEXT_OK\n"
	else
		# dump exit code if stderr was ""
		[ -z "$STATUS" ] && STATUS="error: $rc"
		printf -- "$TEXT_FAIL\t %s\n" "($STATUS)"
	fi
}

check_service_logs()
{
	local service="$1"
	local prefix="$2"

	printf -- "$SEPARATOR\n" | prefix "[$prefix]"
	local jopt="$JOURNAL_OPT --no-hostname --output=cat --no-pager -l -n $LOG_LINES"
	printf -- "${COL_YELLOW}$ journalctl -t $service $jopt${COL_NC}\n" | prefix "[$prefix]"
	journalctl -t $service $jopt | prefix "[$prefix]"
	printf -- "$SEPARATOR\n" | prefix "[$prefix]"
}

port_grep()
{
	local NETSTAT="$1"
	local port=$2
	local required="$3"

	LINE="$( echo "$NETSTAT" | grep "\:$port" | tr '\n' ' ' )"
	if [ -n "$LINE" ]; then
		printf -- "$TEXT_OK\t { $LINE}"
	else
		if [ "$required" = "false" ]; then
			printf -- "$TEXT_NOTICE"
		else
			printf -- "$TEXT_FAIL\t Port $port not open!"
		fi
	fi
}

prefix()
{
	local prefix="$1"
	local IFS=''
	while read -r line; do
		printf -- "${COL_WHITE}${prefix}${COL_NC} %s\n" "${line}"
	done
}

check_unix_sock()
{
	local socket="$1"
	local required="$2"

	if [ -S "$socket" ]; then
		printf -- "$TEXT_OK\t { $socket}"
	else
		if [ "$required" = "false" ]; then
			printf -- "$TEXT_NOTICE"
		else
			printf -- "$TEXT_FAIL\t Socket $socket not open!"
		fi
	fi
}

check_network()
{
	local PORTS
	PORTS=$(netstat -tnl 2>/dev/null | grep tcp | awk '{ print $4 }' | sort)
	printf -- "  * %-23s : %s\n" "OpenSSH" "$( port_grep "$PORTS" 22 true  )"
	printf -- "  * %-23s : %s\n" "Kanto CM" "$(check_unix_sock "$KANTO_SOCK" true  )"
	printf -- "  * %-23s : %s\n" "Mosquitto Server" "$( port_grep "$PORTS" 1883 true  )"
}


check_can()
{
	local can="$1"
	local RESULT
	RESULT=$( ip address | grep ": $can:" )
	if [ -z "$RESULT" ]; then
		printf -- "$TEXT_FAIL\t ($can not found)\n"
	elif echo "$RESULT" | grep -q ",UP"; then
		printf -- "$TEXT_OK\n"
	else
		printf -- "$TEXT_FAIL\t ($RESULT)\n"
	fi
}

check_cloudconnector()
{
	if [ -n "$MOSQUITTO_HOST" ]; then
		local RESULT
		RESULT=$( mosquitto_sub --quiet -h ${MOSQUITTO_HOST} -t 'edge/connection/remote/status' -C 1 -W 1)
		if [ -z "$RESULT" ]; then
			printf -- "$TEXT_FAIL\t\n"
		elif echo "$RESULT" | grep -q "connected\":true"; then
			local LAST_UPDATE
			local NOW
			local DIFF
			local SINCE
			LAST_UPDATE=$(mosquitto_sub --quiet -h ${MOSQUITTO_HOST} -t 'edge/connection/remote/status' -C 1 -W 1 | jq .timestamp)
			NOW=$(date +"%s")
			DIFF=$((NOW - LAST_UPDATE))
			SINCE=$(date -u -d @"$DIFF" +'%-Mm %-Ss')
			printf -- "$TEXT_OK\t (connected since $SINCE)\n"
		else
			printf -- "$TEXT_FAIL\t ($RESULT)\n"
		fi
	else
		printf -- "$TEXT_FAIL\t (Mosquitto unavailable)\n"
	fi
}

check_cloudconnector_deviceid()
{
	if [ -n "$MOSQUITTO_HOST" ]; then
		RESULT=$( mosquitto_rr --quiet -h ${MOSQUITTO_HOST} -t 'edge/thing/request' -e 'edge/thing/response' -W 1 -m '')
		RC=$?
		if [ $RC = 27 ]; then
			printf -- "$TEXT_FAIL\t (Connector did not respond)\t\n"
		elif [ -z "$RESULT" ]; then
			printf -- "$TEXT_FAIL\t ($RC)\t\n"
		elif echo "$RESULT" | grep -q "deviceId"; then
			local DEVICEID
			DEVICEID=$( echo "$RESULT" | jq .deviceId)
			printf -- "$TEXT_OK\t ($DEVICEID)\n"
		else
			printf -- "$TEXT_FAIL\t ($RC: $RESULT)\n"
		fi
	else
		printf -- "$TEXT_FAIL\t (Mosquitto unavailable)\n"
	fi
}

cm_get_container_id ()
{
	local CONT_NAME=$1
	${KANTO_CMD} get -n $CONT_NAME 2>/dev/null | jq -r " .container_id"
}

cm_check_logging_type ()
{
	local CONT_ID=$1
	${KANTO_CMD} get ${CONT_ID} | jq -r " .host_config.log_config.driver_config.type"
}

cm_get_container_logs () # get the last n (following tail syntax) lines of a container's logs by name
{
	local CONT_NAME=$1
	local LOG_MAX_LINES=$2
	CONT_ID=$(cm_get_container_id $CONT_NAME)
	if [ $CONT_ID ]; then
		LOGGING_TYPE=$(cm_check_logging_type $CONT_ID)
		if [ $LOGGING_TYPE = "json-file" ]; then # according to kanto docs logging type is either "json-file" (to json.log) or "none"
			tail -n $LOG_MAX_LINES ${KANTO_CM_HOME_DIR}/containers/${CONT_ID}/${KANTO_CM_LOG_FILE}
		fi
	fi
}

dump_logs()
{
	if [ -n "$KANTO_CM_CONTAINERS" ]; then
		printf -- "\n${COL_WHITE}************ [Container logs] **********${COL_NC}\n\n"

		for container in $KANTO_CM_CONTAINERS; do
			cm_get_container_logs "${container}" $KANTO_LOG_LINES # get the last $KANTO_LOG_LINES lines of the log
			printf -- "\n"
		done
	fi

	if [ -n "$SDV_SERVICES" ] || [ -n "$SDV_SERVICES_OPT" ]; then
		printf -- "\n${COL_WHITE}************ [Service logs] **********${COL_NC}\n\n"

		local services="$SDV_SERVICES $SDV_SERVICES_OPT"
		for service in $services; do
			[ "$DUMP_SERVICES" = "1" ] && $SYSTEMCTL_CMD status --no-pager -q "${service}" -n 0 | prefix "[${service}]"
			check_service_logs "${service}" "${service}"
			printf -- "\n"
		done
	fi
	printf -- "\n"
}

list_containers () {
	local LIST_TITLE="$1"
	shift
	local LIST_CONTAINERS="$*"

	printf -- "$SEPARATOR\n"
	printf -- "${COL_WHITE}[${LIST_TITLE}]${COL_NC}\n"

	if [ ${CM_STATUS} -eq 0 ]; then

		KANTO_CM_LIST=$(${KANTO_CMD} list)

		# removes tabs, splits on pipe and takes the container name and status colums ($2/$4)
		FOUND_CONTAINERS=$(echo "$KANTO_CM_LIST" | awk -F'|' 'NF && NR>3 {gsub(/\s|\t/, ""); print $2"|"$4}')

		for expectedCtr in ${LIST_CONTAINERS}; do
			unset found
			for found_name in ${FOUND_CONTAINERS}; do
				found_status="${found_name#"$expectedCtr|"}"
				if [ "${found_name}" != "${found_status}" ]; then
					if [ "$found_status" = "Running" ]; then
							printf "  * %-40s : $TEXT_OK\n" "${expectedCtr}"
						else
							printf "  * %-40s : $TEXT_WARN (%s)\n" "${expectedCtr}" "$found_status"
					fi
					found=1
					break
				fi
			done

			if [ -z "${found}" ]; then
				printf "  * %-40s : $TEXT_WARN (%s)\n" "${expectedCtr}" "NOT FOUND"
			fi
		done




	else
		printf "  * %-40s : $TEXT_FAIL (%s)\n" "Kanto Container Management" "Unavailable"
	fi
}


######################################################
#                        setup                       #
######################################################

while [ -n "$1" ]; do
	if [ "$1" = "-l" ] || [ "$1" = "--log" ]; then
		DUMP_LOGS=1
		if [ -n "$2" ]; then
			shift # next arg
			LOG_LINES=$1
		fi
	elif [ "$1" = "--verbose" ] || [ "$1" = "-v" ]; then
		VERBOSE=1
	elif [ "$1" = "--ansi" ]; then
		# reset COL_XX for monochrome output
		export COL_NC=""
		export COL_RED=""
		export COL_GREEN=""
		export COL_YELLOW=""
		export COL_BLUE=""
		export COL_WHITE=""
		export COL_GRAY=""
		export COL_NC_BOLD=""
	elif [ "$1" = "--help" ]; then
		echo "Usage: $0 {options}"
		echo "	--log {no_lines} | -l {no_lines} : Show monitored pod/service logs. Specify {no_lines} to change default lines of logs."
		echo "	--ansi : Don't use colored output."
		echo "	--verbose | -v : Enable verbose mode."
		echo "	--help : This message."
		echo
		echo "  NOTE: Uses SDV_ variables from \$HOME/.config/sdv.conf or /etc/sdv/sdv.conf"
		echo
		exit 0
	fi
	shift
done

init_colors

#########################################
# Read Local / Global SDV configuration #
#########################################
# shellcheck source=/etc/sdv/sdv.conf
if [ -f "$HOME/.config/sdv.conf" ]; then
	. "$HOME/.config/sdv.conf"
	[ "$VERBOSE" = "1" ] && echo "# Config loaded from: $HOME/.config/sdv.conf" && grep -v  '^#' $HOME/.config/sdv.conf | sort -u
elif [ -f "/etc/sdv/sdv.conf" ]; then
	. "/etc/sdv/sdv.conf"
	[ "$VERBOSE" = "1" ] && echo "# Config loaded from: /etc/sdv/sdv.conf" && grep -v  '^#' /etc/sdv/sdv.conf | sort -u
else
	[ "$VERBOSE" = "1" ] && echo "# Config file not found!"
fi

######################################################
#                        main                        #
######################################################

[ -n "$DUMP_LOGS" ] && dump_logs
printf -- "${COL_WHITE}[SDV Info]${COL_NC}\n"
# get info values
. /etc/os-release
IMAGE_VERSION=$( cat /etc/issue 2>/dev/null )
IMAGE_TIMESTAMP=$( cat /etc/version 2>/dev/null )
printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "OS Release:" "${PRETTY_NAME}"
printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Image Version:" "${IMAGE_VERSION}"
printf -- "  * %-23s : %s\n" "Build Time:" "${IMAGE_TIMESTAMP}"
printf -- "$SEPARATOR\n"

# make sure CAN is up
printf -- "${COL_WHITE}[CAN Status]${COL_NC}\n"
printf -- "  * %-23s : $(check_can $SDV_CAN)\n" "$SDV_CAN"

printf -- "$SEPARATOR\n"
printf -- "${COL_WHITE}[SDV Ports]${COL_NC}\n"
check_network
printf -- "$SEPARATOR\n"

if [ -n "$SDV_SERVICES" ]; then
	printf -- "${COL_WHITE}[SDV Services]${COL_NC}\n"
	for service in $SDV_SERVICES; do
		printf '  * %-23s : %s\n' "${service}" "$( check_service ${service} )"
	done
fi
if [ -n "$SDV_SERVICES_OPT" ]; then
	printf -- "${COL_WHITE}[SDV Optional Services]${COL_NC}\n"
	for service in $SDV_SERVICES_OPT; do
		printf '  * %-23s : %s\n' "${service}" "$( check_service ${service} false )"
	done
fi

systemctl --quiet is-active container-management
CM_STATUS=$?

if [ -n "$KANTO_CM_CONTAINERS" ]; then
	list_containers "Kanto CM Containers" $KANTO_CM_CONTAINERS
fi

if [ -n "$KANTO_CM_CONTAINERS_OPT" ]; then
	list_containers "Kanto CM Containers (OPTIONAL)" $KANTO_CM_CONTAINERS_OPT
fi


printf -- "$SEPARATOR\n"
printf -- "${COL_WHITE}[SDV Connectivity]${COL_NC}\n"
#[ -z "$SDV_AZ_DEVICE_ID" ] && SDV_AZ_DEVICE_ID=$( sdv-device-info env 2>/dev/null | grep SDV_AZ_DEVICE_ID= | cut  -d '=' -f 2 )
printf -- "  * %-23s : %s\t (ping $SDV_PING_HOST)\n" "Ping [Internet]"  "$( check_rc ping -q -c 1 -W 1 $SDV_PING_HOST )"
#printf -- "  * %-23s : %s\t (ping $SDV_PING_HOST)\n" "Ping [Internet]"  "$( check_rc timeout --kill-after=2s --signal=9 1s bash -c \"true >/dev/tcp/$SDV_PING_HOST/53\" )"

NSLOOKUP_CMD=$(resolvectl query google.com --legend=false -4 --no-pager)
NSLOOKUP_RC=$?
NSLOOKUP_CUT=$(echo $NSLOOKUP_CMD | cut -d ' ' -f 2)
if [ $NSLOOKUP_RC ]; then
	printf -- "  * %-23s : $TEXT_OK\t (%s)\n" "DNS Lookup [Internet]"  "$NSLOOKUP_CUT"
else
	printf -- "  * %-23s : $TEXT_FAIL\t (%s)\n" "DNS Lookup [Internet]"  "Unable to find service ($NSLOOKUP_CMD)"
fi

# Static ip for mosquitto server. Containers will have access to host networks iff they run in host network mode.
MOSQUITTO_HOST="127.0.0.1"

printf -- "  * %-23s : %s\n" "Cloud Connector"         "$( check_cloudconnector )"
printf -- "  * %-23s : ${COL_YELLOW}%s${COL_NC}\n" "Device ID:"  "$( check_cloudconnector_deviceid )"
printf -- "$SEPARATOR\n"
